"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addEventListener = addEventListener;
exports.default = void 0;
exports.removeAllEventListeners = removeAllEventListeners;

var _reactNative = require("react-native");

// src/HyperKycEvents.ts
const LINKING_ERROR = `The package 'react-native-hyperkyc-sdk' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n' + '- You are not using Expo managed workflow\n';
const NativeHyperKyc = _reactNative.NativeModules.Hyperkyc ? _reactNative.NativeModules.Hyperkyc : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }

});
const emitter = new _reactNative.NativeEventEmitter(NativeHyperKyc);
const EVENT_NAME = 'onHyperKycEvent'; // Array to store all client callbacks

let clientListeners = []; // Single subscription to native events

let nativeSubscription = null; // Function to broadcast events to all client listeners

const broadcastEvent = data => {
  // Run the broadcast on a background thread using setTimeout
  setTimeout(() => {
    clientListeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        console.error('Error in HyperKYC event listener:', error);
      }
    });
  }, 0);
}; // Function to ensure native listener is set up


const ensureNativeListener = () => {
  if (!nativeSubscription) {
    emitter.removeAllListeners(EVENT_NAME);
    nativeSubscription = emitter.addListener(EVENT_NAME, broadcastEvent);
  }
};

function addEventListener(callback) {
  // Add callback to client listeners
  clientListeners.push(callback); // Ensure native listener is set up

  ensureNativeListener(); // Call native method to remove all listeners

  try {
    var _NativeHyperKyc$addEv;

    (_NativeHyperKyc$addEv = NativeHyperKyc.addEventListener) === null || _NativeHyperKyc$addEv === void 0 ? void 0 : _NativeHyperKyc$addEv.call(NativeHyperKyc);
  } catch (error) {
    console.error('Error adding native event listeners:', error);
  }
}

function removeAllEventListeners() {
  // Clear all client listeners
  clientListeners = []; // Remove native subscription

  if (nativeSubscription) {
    nativeSubscription.remove();
    nativeSubscription = null;
  }

  emitter.removeAllListeners(EVENT_NAME); // Call native method to remove all listeners

  try {
    var _NativeHyperKyc$remov;

    (_NativeHyperKyc$remov = NativeHyperKyc.removeAllEventListeners) === null || _NativeHyperKyc$remov === void 0 ? void 0 : _NativeHyperKyc$remov.call(NativeHyperKyc);
  } catch (error) {
    console.error('Error removing native event listeners:', error);
  }
}

var _default = {
  addEventListener,
  removeAllEventListeners
};
exports.default = _default;
//# sourceMappingURL=HyperKycEvents.js.map