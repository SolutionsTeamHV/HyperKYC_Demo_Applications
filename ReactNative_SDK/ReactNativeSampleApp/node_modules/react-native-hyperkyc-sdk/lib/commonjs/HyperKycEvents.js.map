{"version":3,"sources":["HyperKycEvents.ts"],"names":["LINKING_ERROR","Platform","select","ios","default","NativeHyperKyc","NativeModules","Hyperkyc","Proxy","get","Error","emitter","NativeEventEmitter","EVENT_NAME","clientListeners","nativeSubscription","broadcastEvent","data","setTimeout","forEach","listener","error","console","ensureNativeListener","removeAllListeners","addListener","addEventListener","callback","push","removeAllEventListeners","remove"],"mappings":";;;;;;;;;AACA;;AADA;AAGA,MAAMA,aAAa,GAChB,oFAAD,GACAC,sBAASC,MAAT,CAAgB;AAAEC,EAAAA,GAAG,EAAE,gCAAP;AAAyCC,EAAAA,OAAO,EAAE;AAAlD,CAAhB,CADA,GAEA,sDAFA,GAGA,6CAJF;AAMA,MAAMC,cAAc,GAAGC,2BAAcC,QAAd,GACnBD,2BAAcC,QADK,GAEnB,IAAIC,KAAJ,CACE,EADF,EAEE;AACEC,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIC,KAAJ,CAAUV,aAAV,CAAN;AACD;;AAHH,CAFF,CAFJ;AAWA,MAAMW,OAAO,GAAG,IAAIC,+BAAJ,CAAuBP,cAAvB,CAAhB;AACA,MAAMQ,UAAU,GAAG,iBAAnB,C,CAEA;;AACA,IAAIC,eAA2C,GAAG,EAAlD,C,CACA;;AACA,IAAIC,kBAA8C,GAAG,IAArD,C,CAEA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAe;AACpC;AACAC,EAAAA,UAAU,CAAC,MAAM;AACfJ,IAAAA,eAAe,CAACK,OAAhB,CAAwBC,QAAQ,IAAI;AAClC,UAAI;AACFA,QAAAA,QAAQ,CAACH,IAAD,CAAR;AACD,OAFD,CAEE,OAAOI,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,mCAAd,EAAmDA,KAAnD;AACD;AACF,KAND;AAOD,GARS,EAQP,CARO,CAAV;AASD,CAXD,C,CAaA;;;AACA,MAAME,oBAAoB,GAAG,MAAM;AACjC,MAAI,CAACR,kBAAL,EAAyB;AACvBJ,IAAAA,OAAO,CAACa,kBAAR,CAA2BX,UAA3B;AACAE,IAAAA,kBAAkB,GAAGJ,OAAO,CAACc,WAAR,CAAoBZ,UAApB,EAAgCG,cAAhC,CAArB;AACD;AACF,CALD;;AAOO,SAASU,gBAAT,CAA0BC,QAA1B,EAA+D;AACpE;AACAb,EAAAA,eAAe,CAACc,IAAhB,CAAqBD,QAArB,EAFoE,CAGpE;;AACAJ,EAAAA,oBAAoB,GAJgD,CAMpE;;AACA,MAAI;AAAA;;AACF,6BAAAlB,cAAc,CAACqB,gBAAf,qFAAArB,cAAc;AACf,GAFD,CAEE,OAAOgB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,sCAAd,EAAsDA,KAAtD;AACD;AACF;;AAEM,SAASQ,uBAAT,GAAyC;AAC9C;AACAf,EAAAA,eAAe,GAAG,EAAlB,CAF8C,CAI9C;;AACA,MAAIC,kBAAJ,EAAwB;AACtBA,IAAAA,kBAAkB,CAACe,MAAnB;AACAf,IAAAA,kBAAkB,GAAG,IAArB;AACD;;AAEDJ,EAAAA,OAAO,CAACa,kBAAR,CAA2BX,UAA3B,EAV8C,CAY9C;;AACA,MAAI;AAAA;;AACF,6BAAAR,cAAc,CAACwB,uBAAf,qFAAAxB,cAAc;AACf,GAFD,CAEE,OAAOgB,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;AACD;AACF;;eAEc;AACbK,EAAAA,gBADa;AAEbG,EAAAA;AAFa,C","sourcesContent":["// src/HyperKycEvents.ts\nimport { NativeModules, NativeEventEmitter, EmitterSubscription, Platform } from 'react-native';\n\nconst LINKING_ERROR =\n  `The package 'react-native-hyperkyc-sdk' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst NativeHyperKyc = NativeModules.Hyperkyc\n  ? NativeModules.Hyperkyc\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst emitter = new NativeEventEmitter(NativeHyperKyc);\nconst EVENT_NAME = 'onHyperKycEvent';\n\n// Array to store all client callbacks\nlet clientListeners: Array<(data: any) => void> = [];\n// Single subscription to native events\nlet nativeSubscription: EmitterSubscription | null = null;\n\n// Function to broadcast events to all client listeners\nconst broadcastEvent = (data: any) => {\n  // Run the broadcast on a background thread using setTimeout\n  setTimeout(() => {\n    clientListeners.forEach(listener => {\n      try {\n        listener(data);\n      } catch (error) {\n        console.error('Error in HyperKYC event listener:', error);\n      }\n    });\n  }, 0);\n};\n\n// Function to ensure native listener is set up\nconst ensureNativeListener = () => {\n  if (!nativeSubscription) {\n    emitter.removeAllListeners(EVENT_NAME);\n    nativeSubscription = emitter.addListener(EVENT_NAME, broadcastEvent);\n  }\n};\n\nexport function addEventListener(callback: (data: any) => void): void {\n  // Add callback to client listeners\n  clientListeners.push(callback);\n  // Ensure native listener is set up\n  ensureNativeListener();\n\n  // Call native method to remove all listeners\n  try {\n    NativeHyperKyc.addEventListener?.();\n  } catch (error) {\n    console.error('Error adding native event listeners:', error);\n  }\n}\n\nexport function removeAllEventListeners(): void {\n  // Clear all client listeners\n  clientListeners = [];\n  \n  // Remove native subscription\n  if (nativeSubscription) {\n    nativeSubscription.remove();\n    nativeSubscription = null;\n  }\n\n  emitter.removeAllListeners(EVENT_NAME);\n  \n  // Call native method to remove all listeners\n  try {\n    NativeHyperKyc.removeAllEventListeners?.();\n  } catch (error) {\n    console.error('Error removing native event listeners:', error);\n  }\n}\n\nexport default {\n  addEventListener,\n  removeAllEventListeners,\n};"]}