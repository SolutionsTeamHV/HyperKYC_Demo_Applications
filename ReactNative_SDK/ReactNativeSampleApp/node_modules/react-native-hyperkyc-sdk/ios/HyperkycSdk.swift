

import Foundation
import HyperKYC

@objc(Hyperkyc)
class Hyperkyc: RCTEventEmitter {
    @objc override static func requiresMainQueueSetup() -> Bool { return true }

    var skipKeysArray: [String] = ["responseResult", "variables", "moduleId"]
    private var isEventListenerAdded: Bool = false
    private var isNativeListenerRegistered = false

    @objc(createUniqueId:)
    func createUniqueId(_callback: @escaping RCTResponseSenderBlock) {
        let uniqueId = HyperKyc.createUniqueId()
        _callback([uniqueId])
    }

    @objc(prefetch:workflowId:)
    func prefetch(_appId: String, workflowId: String) {
        HyperKyc.prefetch(appId: _appId, workflowId: workflowId)
    }

    @objc(addEventListener)
    func addEventListener() {
        isEventListenerAdded = true
    }

    @objc(removeAllEventListeners)
    func removeAllEventListeners() {
        HyperKyc.removeAllEventListeners()
        isEventListenerAdded = false
    }

    @objc(launch:callback:)
    func launch(_config: NSDictionary, callback: @escaping RCTResponseSenderBlock) {
        let appId = _config["appId"] as? String
        let transactionId = _config["transactionId"] as? String
        let appKey = _config["appKey"] as? String
        let accessToken = _config["accessToken"] as? String
        let workflowId = _config["workflowId"] as? String
        let defaultLangCode = _config["defaultLangCode"] as? String
        let inputs = _config["inputs"] as? [String: Any]
        let useLocation = _config["useLocation"] as? Bool
        let uniqueId = _config["uniqueId"] as? String
        let metadata: [String: String] = [
            "sdk-version": "0.46.1",
            "sdk-type": "React Native"
        ]

        if isEventListenerAdded {
            HyperKyc.addEventListener { event in
                if self.isNativeListenerRegistered {
                    self.sendEvent(withName: "onHyperKycEvent", body: event)
                }
            }
        }

        DispatchQueue.main.async {
            let controller = RCTPresentedViewController()

            var hyperKYCConfig: HyperKycConfig

            if let accessToken = accessToken {
                hyperKYCConfig = HyperKycConfig(accessToken: accessToken, workflowId: workflowId!, transactionId: transactionId!)
            }
            else {
                hyperKYCConfig = HyperKycConfig(appId: appId!, appKey: appKey!, workflowId: workflowId!, transactionId: transactionId!)
            }
            if let inputs = inputs {
                hyperKYCConfig.setInputs(inputs: inputs)
            }
            if let defaultLangCode = defaultLangCode {
                hyperKYCConfig.setDefaultLangCode(language: defaultLangCode)
            }
            if let useLocation = useLocation {
                hyperKYCConfig.setUseLocation(shouldUse: useLocation)
            }
            if let uniqueId = uniqueId {
                hyperKYCConfig.setUniqueId(uuid: uniqueId)
            }
            hyperKYCConfig.addMetadata(metadata: metadata)

            // launch HyperKyc
            HyperKyc.launch(controller!, hyperKycConfig: hyperKYCConfig) { hyperKycResult in
                let result = self.processHyperKycResponse(hyperKycResult: hyperKycResult)
                callback([result])
            }
        }
    }

    func processHyperKycResponse(hyperKycResult: HyperKycResult) -> [String: Any] {
        var kycData = [:] as [String: Any]

        kycData["status"] = hyperKycResult.status
        kycData["transactionId"] = hyperKycResult.transactionId

        kycData["details"] = hyperKycResult.details
        if let errorCode = hyperKycResult.errorCode {
            kycData["errorCode"] = errorCode
        }
        if let errorMessage = hyperKycResult.errorMessage {
            kycData["errorMessage"] = errorMessage
        }

        if let moduleId = hyperKycResult.latestModule {
            kycData["latestModule"] = moduleId
        }

        return kycData
    }

    // Required override
    override func supportedEvents() -> [String] {
        return ["onHyperKycEvent"]
    }

    // Optional: Called when JS side starts observing
    override func startObserving() {
        isNativeListenerRegistered = true
    }

    // Optional: Called when JS side stops observing
    override func stopObserving() {
        isNativeListenerRegistered = false
    }

      // Add these two methods
    @objc override func addListener(_ eventName: String) {
        // Required for RN built-in EventEmitter support
        // Can be empty if we don't need per-event management.
        super.addListener(eventName)
    }

    @objc override func removeListeners(_ count: Double) {
        // Required for RN built-in EventEmitter support
        // Can be empty if we don't need per-event management.
        super.removeListeners(count)
    }
}